{"/home/travis/build/npmtest/node-npmtest-mozscape/test.js":"/* istanbul instrument in package npmtest_mozscape */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mozscape/lib.npmtest_mozscape.js":"/* istanbul instrument in package npmtest_mozscape */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mozscape = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mozscape = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mozscape/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mozscape && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mozscape */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mozscape\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mozscape.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mozscape.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mozscape.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mozscape.__dirname + '/lib.npmtest_mozscape.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mozscape/node_modules/mozscape/lib/mozscape.js":"let request = require('request');\nlet crypto = require('crypto');\n\n/**\n * Mozscape API client.\n */\n\nlet Mozscape = function (accessId, secret) {\n  this.configure({accessId: accessId, secret: secret});\n};\n\nexports.Mozscape = Mozscape;\n\n(function () {\n\n  this.defaults = {\n    hostname: 'lsapi.seomoz.com',\n    path: 'linkscape',\n    userAgent: 'node-mozscape (https://github.com/scott-wyatt/node-mozscape)',\n    accessId: null,\n    secret: null\n  };\n\n  this.configure = function (options) {\n    options = options || {};\n    this.options = {};\n\n    Object.keys(this.defaults).forEach(key => {\n      this.options[key] = typeof options[key] !== 'undefined' ? options[key] : this.defaults[key];\n    });\n\n    return this;\n  };\n\n  /**\n   * URL Metrics API\n   *\n   * http://apiwiki.moz.com/url-metrics\n   */\n  this.urlMetrics = function (url, cols, callback) {\n    let apiPath = `url-metrics/${encodeURIComponent(url)}`;\n    let params = {\n      Cols: this._translateBitfield(cols, this.URL_METRICS_FLAGS)\n    };\n\n    this.get(apiPath, params, callback);\n  };\n\n  this.bulkUrlMetrics = function (urlsArray, cols, callback) {\n    let apiPath = 'url-metrics/';\n\n    cols = this._translateBitfield(cols, this.URL_METRICS_FLAGS);\n    apiPath += `?Cols=${cols}`;\n\n    let expires = Date.now() + 300;\n    let stringToSign = `${this.options.accessId}\\n${expires}`;\n    let binarySignature = crypto.createHmac('sha1', this.options.secret).update(stringToSign).digest('base64');\n    let urlSafeSignature = encodeURIComponent(binarySignature);\n\n    apiPath += `&AccessId=${this.options.accessId}`;\n    apiPath += `&Expires=${expires}`;\n    apiPath += `&Signature=${urlSafeSignature}`;\n\n    let path = `http://${this.options.hostname}/${this.options.path}/${apiPath}`;\n    let auth = new Buffer(`${this.options.accessId}:${this.options.secret}`).toString('base64');\n    let params = JSON.stringify(urlsArray);\n    let options = {\n      url: path,\n      method: 'POST',\n      headers: {\n        'User-Agent': this.defaults.userAgent,\n        Authorization: `Basic ${auth}`,\n        'Content-Length': params.length\n      },\n      body: params\n    };\n    request(options, callback);\n  };\n\n  /**\n   * Links API\n   *\n   * http://apiwiki.moz.com/link-metrics\n   */\n  this.links = function (url, scope, options, callback) {\n    let apiPath = `links/${encodeURIComponent(url)}`;\n    let params = {\n      Scope: scope\n    };\n\n    if (typeof options.sort !== 'undefined') {\n      params.Sort = options.sort;\n    }\n\n    if (typeof options.filter !== 'undefined') {\n      params.Filter = options.filter.join('+');\n    }\n\n    if (typeof options.targetCols !== 'undefined') {\n      params.TargetCols = this._translateBitfield(\n        options.targetCols,\n        this.URL_METRICS_FLAGS\n      );\n    }\n\n    if (typeof options.sourceCols !== 'undefined') {\n      params.SourceCols = this._translateBitfield(\n        options.sourceCols,\n        this.URL_METRICS_FLAGS\n      );\n    }\n\n    if (typeof options.linkCols !== 'undefined') {\n      params.LinkCols = this._translateBitfield(\n        options.linkCols,\n        this.LINK_FLAGS\n      );\n    }\n\n    this.get(apiPath, params, callback);\n  };\n\n  /**\n   * Anchor Text API\n   *\n   * http://apiwiki.moz.com/anchor-text-metrics\n   */\n  this.anchorText = function (url, scope, cols, callback) {\n    let apiPath = `anchor-text/${encodeURIComponent(url)}`;\n    let params = {\n      Scope: scope,\n      Cols: this._translateBitfield(cols, this.ANCHOR_TEXT_FLAGS),\n      Sort: 'domains_linking_page'\n    };\n\n    this.get(apiPath, params, callback);\n  };\n\n  /**\n   * Top Pages API\n   *\n   * http://apiwiki.moz.com/top-pages\n   */\n  this.topPages = function (url, cols, options, callback) {\n    let apiPath = `top-pages/${encodeURIComponent(url)}`;\n    let params = {\n      Cols: this._translateBitfield(cols, this.URL_METRICS_FLAGS)\n    };\n\n    params.Offset = typeof options.offset === 'undefined' ? 0 : options.offset;\n    params.Limit = typeof options.limit === 'undefined' ? 1000 : options.limit;\n\n    this.get(apiPath, params, callback);\n  };\n\n  /**\n   * Metadata API\n   * option: last_update, next_update, index_status\n   * http://apiwiki.moz.com/metadata\n   */\n  this.metadata = function (option, callback) {\n    let apiPath = `metadata/${option}`;\n    let params = {};\n\n    this.get(apiPath, params, callback);\n  };\n\n  /**\n   * Translate an array of keys and an object lookup table\n   * into a bit mask.\n   */\n  this._translateBitfield = function (columns, lookup) {\n    let bits = 0;\n\n    columns.forEach(key => {\n      if (typeof lookup[key] !== 'undefined') {\n\n        /*\n         * javascript has a \"documented bug\" in that it will only\n         * use the lower 32 bit of a number in binary OR operations.\n         * Some of the bitfields in the Mozscape API have more than 32 bits.\n         * Therefore we replace binary OR (|=) with addition (+=)\n         * which has the same effect, except that it works. - yas4891\n         */\n\n        bits += lookup[key];\n      }\n    });\n\n    return bits;\n  };\n\n  /**\n   * GET Request\n   */\n  this.get = function (apiPath, params, callback) {\n    return this.send(apiPath, params, 'GET', callback);\n  };\n\n  /**\n   * POST Request\n   */\n  this.post = function (apiPath, params, callback) {\n    return this.send(apiPath, params, 'POST', callback);\n  };\n\n  /**\n   * Send request to the MOZ API\n   */\n  this.send = function (apiPath, params, method, callback) {\n\n    let path = `http://${this.options.hostname}/${this.options.path}/${apiPath}`;\n    let auth = new Buffer(`${this.options.accessId}:${this.options.secret}`).toString('base64');\n\n    let options = {\n      url: path,\n      headers: {\n        'User-Agent': this.defaults.userAgent,\n        Authorization: `Basic ${auth}`,\n        'Content-Length': 0\n      }\n    };\n\n    let args = [];\n    Object.keys(params).forEach(key => args.push(`${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`));\n\n    let queryString = args.join('&');\n    if (queryString) {\n      switch (method) {\n        case 'GET':\n          options.url += `?${queryString}`;\n          break;\n        case 'POST':\n          options.headers['Content-Length'] = queryString.length;\n          break;\n        default:\n          break;\n      }\n    }\n\n    function cb(error, response, body) {\n      if (error)\n        return callback(error);\n\n      if (response.statusCode >= 300 || response.statusCode < 200)\n        return callback({status: response.statusCode, msg: body});\n\n      return callback(null, JSON.parse(body));\n    }\n\n    console.log('Calling: ' + options.url);\n    request(options, cb);\n  };\n\n  /**\n   * URL Metrics Columns\n   */\n  this.URL_METRICS_FLAGS = {\n    title: 1,\n    url: 4,\n    subdomain: 8,\n    root_domain: 16,\n    external_equity_links: 32,\n    subdomain_external_links: 64,\n    domain_external_links: 128,\n    juice_passing_links: 256,\n    subdomains_linking: 512,\n    domains_linking: 1024,\n    links: 2048,\n    subdomain_subs_linking: 4096,\n    domain_domains_linking: 8192,\n    mozRank: 16384,\n    subdomain_mozRank: 32768,\n    domain_mozRank: 65536,\n    mozTrust: 131072,\n    subdomain_mozTrust: 262144,\n    domain_mozTrust: 524288,\n    external_mozRank: 1048576,\n    subdomain_external_juice: 2097152,\n    domain_external_juice: 4194304,\n    subdomain_domain_juice: 8388608,\n    domain_domain_juice: 16777216,\n    spam_score: 67108864,\n    social: 134217728,\n    canonical_url: 268435456,\n    http_status: 536870912,\n    subdomain_links: 4294967296,\n    domain_links: 8589934592,\n    domains_linking_to_subdomain: 17179869184,\n    page_authority: 34359738368,\n    domain_authority: 68719476736,\n    external_links: 549755813888,\n    external_links_to_subdomain: 140737488355328,\n    external_links_to_root: 2251799813685248,\n    linking_c_blocks: 36028797018963968,\n    time_last_crawled: 144115188075855872,\n  };\n\n  /**\n   * Link Columns\n   */\n  this.LINK_FLAGS = {\n    flags: 2,\n    anchor_text: 4,\n    moxRank_passed: 16,\n  };\n\n  /**\n   * Anchor Text Columns\n   */\n  this.ANCHOR_TEXT_FLAGS = {\n    phrase: 2,\n    internal_pages_linking: 8,\n    internal_subdomains_linking: 16,\n    external_pages_linking: 32,\n    external_subdomains_linking: 64,\n    external_domains_linking: 128,\n    internal_mozRank_passed: 256,\n    external_mozRank_passed: 512,\n    flags: 1024,\n  };\n\n}).call(Mozscape.prototype);\n"}